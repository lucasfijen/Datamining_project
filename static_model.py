#%%
import pandas as pd
import datetime
import matplotlib.pyplot as plt
import numpy as np
from sklearn.svm import SVR
import numpy as np
import seaborn as sns; sns.set()
from sklearn.linear_model import LinearRegression

TRAIN_P = 0.6
VALID_P = 0.2
TEST_P = 0.2

# OLD
# database = pd.read_pickle('database_basic_standardised.pkl')
# NEW
database_standard = pd.read_pickle('../database_basic_stand')
database_standard = database_standard.reset_index()
database_standard = database_standard.set_index(['id', 'date'])
database_norm = pd.read_pickle('../database_basic_norm')
database_norm = database_norm.reset_index()
database_norm = database_norm.set_index(['id', 'date'])
# database.head()

database_norm.max()
#%%

# Database that looks like:
# [Original row + History row of N]
def add_history_of_N_days(database, N, method='mean'):
    history_data = []
    database = database[database.columns[:-7]]
    for _, group in database.groupby(['id']):
        for row_id in range(group.shape[0]):
            if row_id > N: 
                history = group.iloc[row_id-N:row_id, :]
            elif row_id == 0:
                # mean_history = database.iloc[0, :]
                mean_history = np.zeros((1, group.shape[1]))
            else:
                history = group.iloc[0:row_id, :]
            if method == 'mean' and (row_id != 0):
                mean_history = history.values.mean(axis=0)
            history_data.append(mean_history)
    return np.vstack(history_data)

def do_tests(database):
    svm_results_valid = []
    svm_results_test = []
    svm_error_valid = []
    svm_error_test = []
    linr_results_valid = []
    linr_results_test = []
    linr_error_valid = []
    linr_error_test = []
    for i in range(0, 30):
        if i != 0:
            history = add_history_of_N_days(database.iloc[:, :], i, method='mean')
            history = pd.DataFrame(history, dtype=float)
            history.columns = 'history_' + database.columns[:-7]
            database_with_history = pd.concat([database.iloc[:, :].reset_index(), history], axis=1)
        else:
            database_with_history = database.reset_index()
        # database_with_history = database.reset_index()
        
        # if i == 4:
        #     print(database_with_history[['id', 'date', 'history_target_mood', 'target_mood']])
        #     return
        X_train = []
        X_valid = []
        X_test = []
        y_train = []
        y_valid = []
        y_test = []
        y_train_bool = []
        y_valid_bool = []
        y_test_bool = []
        for person in database_with_history['id'].unique():
            person_db = database_with_history[database_with_history['id'] == person]
            length = person_db.shape[0]
            train_valid_split = int(length * TRAIN_P)
            valid_test_split = int(length * (1 - TEST_P))
            
            y_train.append(person_db.iloc[:train_valid_split]['target_mood'].values.reshape(-1, 1))
            y_valid.append(person_db.iloc[train_valid_split:valid_test_split]['target_mood'].values.reshape(-1, 1))
            y_test.append(person_db.iloc[valid_test_split:]['target_mood'].values.reshape(-1, 1))
            
            y_train_bool.append(person_db.iloc[valid_test_split:]['shifted_target_mood_bool'].values.reshape(-1, 1))
            y_valid_bool.append(person_db.iloc[train_valid_split:valid_test_split]['shifted_target_mood_bool'].values.reshape(-1, 1))
            y_test_bool.append(person_db.iloc[valid_test_split:]['shifted_target_mood_bool'].values.reshape(-1, 1))

            cols = [c for c in person_db.columns if ('bool' not in c) and ('target' not in c) and ('date' not in c) and ('id' not in c)]
            person_db = person_db[cols]
            X_train.append(person_db.iloc[:train_valid_split].values)
            X_valid.append(person_db.iloc[train_valid_split:valid_test_split].values)
            X_test.append(person_db.iloc[valid_test_split:].values)

        X_train = np.vstack(X_train)
        X_test = np.vstack(X_test)
        X_valid = np.vstack(X_valid)
        y_train = np.squeeze(np.vstack(y_train))
        y_test = np.squeeze(np.vstack(y_test))
        y_valid = np.squeeze(np.vstack(y_valid))
        y_train_bool = np.vstack(y_train_bool)
        y_test_bool = np.vstack(y_test_bool)
        y_valid_bool = np.vstack(y_valid_bool)

        # print(X_train.shape, y_train.shape, X_valid.shape, y_valid.shape, X_test.shape, y_test.shape)
        y_test_bool = np.squeeze(1 - y_test_bool)
        y_valid_bool = np.squeeze(1 - y_valid_bool)

        #%% FIT SVM REGRESSOR
        clf = SVR(gamma='auto')
        # temp = np.zeros(X_train.shape)
        clf.fit(X_train, y_train)

        y_valid_predict = clf.predict(X_valid)
        y_test_predict = clf.predict(X_test)

        svm_y_valid_predict_corrected = y_valid_predict * y_valid_bool
        svm_y_test_predict_corrected = y_test_predict * y_test_bool
        y_valid_corrected = y_valid * y_valid_bool
        y_test_corrected = y_test * y_test_bool 

        svm_results_valid.append(svm_y_valid_predict_corrected)
        svm_results_test.append(svm_y_test_predict_corrected)

        valid_nr_not_interpolated = np.count_nonzero(y_valid_bool)
        test_nr_not_interpolated = np.count_nonzero(y_test_bool)

        svm_mse_valid = (((svm_y_valid_predict_corrected - y_valid_corrected)**4).sum()) / valid_nr_not_interpolated
        print(i, 'SVM valid', svm_mse_valid)
        svm_error_valid.append(svm_mse_valid)
        svm_mse_test = (((svm_y_test_predict_corrected - y_test_corrected)**4).sum()) / test_nr_not_interpolated
        print(i, 'SVM test', svm_mse_test)
        svm_error_test.append(svm_mse_test)

        #FIT LINEAR REGRESSION

        # temp = np.zeros(X_train.shape)
        reg = LinearRegression().fit(X_train, y_train)
        print(reg.intercept_)

        y_valid_predict = reg.predict(X_valid)
        y_test_predict = reg.predict(X_test)

        lin_y_valid_predict_corrected = y_valid_predict * y_valid_bool
        lin_y_test_predict_corrected = y_test_predict * y_test_bool
        y_valid_corrected = y_valid * y_valid_bool
        y_test_corrected = y_test * y_test_bool 

        linr_results_valid.append(lin_y_valid_predict_corrected)
        linr_results_test.append(lin_y_test_predict_corrected)

        valid_nr_not_interpolated = np.count_nonzero(y_valid_bool)
        test_nr_not_interpolated = np.count_nonzero(y_test_bool)

        linr_mse_valid = (((lin_y_valid_predict_corrected - y_valid_corrected)**4).sum()) / valid_nr_not_interpolated
        print(i, 'LinReg valid', linr_mse_valid)
        linr_mse_test = (((lin_y_test_predict_corrected - y_test_corrected)**4).sum()) / test_nr_not_interpolated
        print(i, 'LinReg test', linr_mse_test)

        linr_error_test.append(linr_mse_test)
        linr_error_valid.append(linr_mse_valid)


    return svm_results_valid, svm_results_test, svm_error_valid, svm_error_test, \
            linr_results_valid, linr_results_test, linr_error_valid, linr_error_test


svm_results_valid_norm, svm_results_test_norm, svm_error_valid_norm, svm_error_test_norm, linr_results_valid_norm, linr_results_test_norm, linr_error_valid_norm, linr_error_test_norm = do_tests(database_norm)
svm_results_valid_std, svm_results_test_std, svm_error_valid_std, svm_error_test_std, linr_results_valid_std, linr_results_test_std, linr_error_valid_std, linr_error_test_std = do_tests(database_standard)

#%%
argmin_svm_norm = svm_error_valid_norm.index(min(svm_error_valid_norm))
argmin_linr_norm = linr_error_valid_norm.index(min(linr_error_valid_norm))
print(argmin_svm_norm)
print(argmin_linr_norm)

argmin_svm_std = svm_error_valid_std.index(min(svm_error_valid_std))
argmin_linr_std  = linr_error_valid_std.index(min(linr_error_valid_std))

print(argmin_svm_std)
print(argmin_linr_std)
#%%
from scipy import stats

for s1 in [svm_results_test_norm[0], svm_results_test_std[0], linr_results_test_norm[0], linr_results_test_std[0]]:
    for s2 in [svm_results_test_norm[0], svm_results_test_std[0], linr_results_test_norm[0], linr_results_test_std[0]]:
        print(stats.wilcoxon(s1, s2))


# plt.plot(svm_error_test_norm,'--', label='svm norm')
# # plt.plot(svm_error_test_std, '--', label='svm std')
# plt.plot(svm_error_valid_norm, label='svm norm')
# # plt.plot(svm_error_valid_std, label='svm std')
# plt.plot(linr_error_test_norm, '--', label='linr norm')
# # plt.plot(linr_error_test_std, '--', label='linr std')
# plt.plot(linr_error_valid_norm, label='linr norm')
# # plt.plot(linr_error_valid_std, label='linr std')
# plt.title('Normalised data')
# plt.legend()
# plt.show()

print('PLOTTING')
plt.figure(figsize=(15,4))
plt.subplot(121)
plt.plot(svm_error_valid_norm, label='svm')
plt.plot(linr_error_valid_norm, label='linreg')
plt.plot([0.0005590183160021009 for _ in range(len(linr_error_valid_std))], label='baseline')
plt.title('Normalised data')
# plt.legend()

plt.subplot(122)
plt.plot(svm_error_valid_std, label='svm')
plt.plot(linr_error_valid_std, label='linreg')
plt.plot([3.225059785418059 for _ in range(len(linr_error_valid_std))], label='baseline')
plt.title('Standardised data')
plt.legend()

plt.suptitle('')
plt.savefig('../results_static', facecolor='w', dpi=200)
#%%

print('linr test norm:', linr_error_test_norm[argmin_linr_norm])
print('svm test norm:', svm_error_test_norm[argmin_svm_norm])
print('linr test std:', linr_error_test_std[argmin_linr_std])
print('svm test std:', svm_error_test_std[argmin_svm_std])

#%%
svm_norm = svm_results_test_norm[argmin_linr_norm]
linr_norm = linr_results_test_norm[argmin_linr_norm]
svm_std = svm_results_test_std[argmin_svm_std]
linr_std = linr_results_test_std[argmin_linr_std]



lstm_norm = [0.6672199, 0.67475706, 0.6468854, 0.64886034, 0.65636677, 0.67037135, 0.6490643, 0.67608315, 0.6661951, 0.6372759, 0.64377487, 0.67231816, 0.6061111, 0.6103879, 0.66166234, 0.59540635, 0.66455394, 0.5871268, 0.6530231, 0.65857357, 0.6329891, 0.6609547, 0.6853206, 0.6657668, 0.6322717, 0.6609707, 0.63889045, 0.65878683, 0.6597878, 0.6540549, 0.6322483, 0.65409696, 0.6680038, 0.62533605, 0.645572, 0.6428227, 0.6401804, 0.6548851, 0.6688975, 0.65159094, 0.68219423, 0.670745, 0.63008404, 0.63144773, 0.64984465, 0.63541317, 0.6446043, 0.565765, 0.5773507, 0.6747348, 0.5658135, 0.55642736, 0.5937539, 0.654446, 0.6288024, 0.59914035, 0.6323735, 0.5975564, 0.58187807, 0.6339752, 0.61486924, 0.6332149, 0.6553576, 0.6618687, 0.68096817, 0.62729365, 0.690624, 0.59524393, 0.67009854, 0.640904, 0.6539115, 0.65808296, 0.6868421, 0.66491246, 0.633219, 0.6325747, 0.6370728, 0.63050807, 0.6499424, 0.63748914, 0.63697654, 0.6109544, 0.5643899, 0.75778306, 0.71142757, 0.67572397, 0.7003751, 0.6910155, 0.69763076, 0.68332195, 0.6941923, 0.7166678, 0.64682007, 0.6346797, 0.664981, 0.6428428, 0.65581673, 0.6383614, 0.6420506, 0.6214122, 0.61085725, 0.6537807, 0.6687215, 0.619981, 0.6292924, 0.5759769, 0.623036, 0.61274064, 0.6087649, 0.6616522, 0.6758226, 0.6695163, 0.65096974, 0.7080722, 0.6542226, 0.7099296, 0.6241174, 0.65453553, 0.6464952, 0.71944535, 0.6769641, 0.6236972, 0.69725955, 0.6733352, 0.659805, 0.6680417, 0.6580307, 0.67664576, 0.669199, 0.694576, 0.6496479, 0.6216077, 0.70553094, 0.5967552, 0.6602824, 0.64940417, 0.6576964, 0.65036404, 0.71574783, 0.6727148, 0.61282384, 0.62979674, 0.59620196, 0.6367185, 0.6338092, 0.63306946, 0.6217912, 0.6370669, 0.6017831, 0.60104465, 0.70888644, 0.7167263, 0.6958741, 0.6691786, 0.7294984, 0.71257484, 0.7048434, 0.7130911, 0.73216486, 0.6426166, 0.6217525, 0.68440735, 0.6772661, 0.589402, 0.6583332, 0.6578911, 0.65719765, 0.6576637, 0.72557044, 0.6070391, 0.6356543, 0.6036193, 0.6720499, 0.62232244, 0.6040382, 0.6142684, 0.6551337, 0.6638098, 0.63789606, 0.6426814, 0.6478558, 0.6431996, 0.6789503, 0.60224116, 0.6161541, 0.6535785, 0.663807, 0.67510283, 0.6566955, 0.6534678, 0.62361956, 0.6408866, 0.6714584, 0.660076, 0.68006724, 0.6104821, 0.6092478, 0.6579499, 0.65363544, 0.62628275, 0.6730263, 0.65308195, 0.6148655, 0.67172146, 0.66001856, 0.6794858, 0.6729502, 0.6521029, 0.60582423, 0.69535094, 0.6872091, 0.66979206, 0.69474304, 0.67385375, 0.65963256, 0.6846809, 0.6623912, 0.6637166, 0.6656257, 0.67334557, 0.65809596, 0.66202307, 0.6394436, 0.6602239, 0.6547385, 0.6394477, 0.6782938, 0.6533554, 0.6574582, 0.6480941, 0.6579157, 0.64815724, 0.6179254, 0.5728849, 0.59126425, 0.67328155, 0.6331575, 0.61094135, 0.6504386, 0.6174395, 0.6338467, 0.58361155, 0.61409575, 0.62570626, 0.644375, 0.6080545, 0.7076304, 0.62994456, 0.65907395]
lstm_std = [0.15614337, 0.30376956, 0.3848352, 0.23526761, 0.25030327, -0.002961874, -0.04301229, -0.13944902, -0.015201792, 0.037514076, 0.063708365, -0.025678426, -0.54477465, -0.77635205, -0.7093271, -0.5912881, -0.4907365, -0.56497717, 0.06427564, -0.059544787, -0.1025286, -0.09558427, 0.28144974, 0.28944826, 0.26353857, 0.17016822, 0.123971224, 0.28291714, -0.47668186, -0.40095395, -0.32889062, -0.39854535, -0.34197247, -0.50227237, -0.44339046, -0.30956882, -0.6756513, -0.6697093, -0.20623885, -0.31539413, -0.20363674, -0.22012499, -0.3636986, -0.18516445, -0.1197553, -0.12828764, 0.18476042, -1.1997476, -1.0019672, -0.7910855, -0.96449697, -1.1244766, -1.098874, -0.97150815, -0.9674214, -0.8393012, -0.11774065, -0.43598664, -0.4722636, -0.40158403, -0.42034593, -0.30602133, -0.044515446, -0.31440586, -0.25638694, -0.3414203, 0.39206257, 0.13542122, 0.32322755, 0.2599553, 0.24375317, 0.27556914, 0.36574033, 0.31265527, 0.08178359, -0.44740483, -0.6290611, -0.8676833, -0.8829087, -1.0908015, -0.8929621, -0.9004729, -1.0145153, 0.3901967, 0.31822196, 0.3850306, 0.6638044, 0.538985, 0.7036114, 0.51788914, 0.6224117, 0.71732223, 0.4242867, 0.34745225, 0.2935607, 0.2673376, 0.27833834, 0.03310275, -0.15349363, -0.25244987, -0.23779681, -0.2999472, -0.2188549, -0.32839742, -0.27478835, -0.32557875, -0.06895547, -0.09462327, -0.07569825, 0.321362, 0.11014488, 0.16563419, -0.21554092, -0.28168714, -0.3715937, 0.055441275, 0.0007735044, -0.107847586, -0.0042943656, 0.15487012, 0.16726556, 0.014630377, 0.031481996, -0.087689854, -0.22999956, 0.04787241, 0.050891206, -0.12857863, -0.09669347, -0.08955167, 0.60290265, -0.26186103, 0.080083236, -0.21771038, -0.2064198, -0.00039069355, 0.16051793, 0.02139236, 0.27273384, 0.23642257, -0.028014213, 0.39885637, 0.32419997, 0.31603572, 0.3485118, 0.45673308, 0.42325357, 0.52179873, 0.34587398, 0.2513999, -0.13600615, -0.18838829, -0.28195596, -0.21049261, 0.18880674, 0.22963804, 0.29957032, 0.34465662, 0.41169032, 0.039061055, -0.1501208, 0.14659303, -0.1086909, -0.44280183, -0.5246475, -0.46677038, -0.5423782, -0.3005846, 0.04037094, -0.27997795, -0.07250609, -0.38704067, -0.29368332, -0.385929, -0.52230316, -0.4285484, -0.28721356, 0.028531134, -0.034044996, 0.052393496, 0.07900919, 0.014703095, 0.09804389, -0.17728224, -0.29526177, 0.14937931, 0.4301475, 0.5460621, 0.471961, 0.6294812, 0.31194428, 0.34693965, 0.26974428, 0.3735642, 0.38671723, 0.16744277, -0.0658263, -0.052670322, -0.022843197, 0.09757355, 0.21230015, 0.10306147, -0.015918314, 0.05035138, 0.20742974, 0.15168282, 0.3032278, 0.09880665, 0.055396706, 0.36835274, 0.42999044, 0.6098319, 0.28815684, 0.3375625, 0.34481314, 0.35816595, 0.28941324, 0.39192304, 0.5498482, 0.5110134, 0.48844084, 0.4417316, -0.15203673, -0.19412027, -0.19964208, -0.34950578, -0.23518047, -0.22936496, -0.20115736, -0.2585572, -0.33119667, 0.6273118, 0.46627787, 0.0016684681, -0.018752873, 0.28763145, 0.1496082, -0.02206023, 0.04109299, 0.04360591, -0.7711228, -0.9952476, -1.1302695, -1.005996, -1.1619065, -0.8485023, -0.9213747, -0.6292882, -0.50164855]
baseline_std = [0.2008812571874224, 0.5882239923760226, 0.4913883085788726, 0.5882239923760226, 0.007209889593122255, 0.7818953599703228, 0.9755667275646228, 0.5882239923760226, 0.9755667275646228, 0.0, -0.4769685293926281, -0.4769685293926281, -1.2839325610355454, -1.9295037863498792, -1.4453253673641289, -1.2839325610355454, -1.4453253673641289, 0.00720988959312224, 0.007209889593122244, 0.20088125718742236, 0.00720988959312224, 0.2008812571874224, 0.5882239923760226, 0.7334775180717478, 0.3945526247817225, 0.0, 0.2492990990859974, 0.0, 0.2008812571874224, 0.7818953599703228, 0.3945526247817225, 0.00720988959312224, -0.1864614780011779, 0.00720988959312224, -0.1864614780011779, 0.007209889593122232, -0.2348793198997529, 0.007209889593122216, 0.2492990990859974, -0.18646147800117796, 0.9755667275646228, 0.2008812571874224, -0.7190577388855033, 0.5882239923760226, 0.0, 0.00720988959312224, -0.23487931989975294, -1.5421610511612789, -0.9611469483783784, -0.2348793198997529, -1.9295037863498792, -2.252289399007046, -1.9295037863498792, -0.2348793198997529, -0.0, -0.7190577388855033, -0.9611469483783784, -0.9611469483783784, -0.9611469483783784, -1.1548183159726786, -1.2032361578712536, -0.31557572306404463, 0.007209889593122209, 0.2008812571874224, 0.3945526247817225, -0.1864614780011779, 0.9755667275646228, -0.7190577388855033, -0.38013284559547794, -0.23487931989975294, 0.00720988959312223, 0.4913883085788726, 0.5882239923760226, 0.7334775180717478, -0.38013284559547794, -0.9611469483783784, -0.3801328455954781, -0.9611469483783784, -0.7190577388855033, -0.7674755807840783, -1.4453253673641289, -1.3484896835669788, -2.1231751539441794, 0.9755667275646228, 0.7334775180717477, 1.7018343560432485, 1.1692380951589227, 0.9755667275646228, 1.1692380951589227, 0.9755667275646228, 1.2176559370574982, 0.9755667275646228, 0.9755667275646228, 0.0, 0.0, 0.652781114907456, -0.31557572306404463, -0.9611469483783784, -0.3155757230640447, -0.18646147800117796, -0.18646147800117796, 0.00720988959312224, 0.00720988959312224, 0.00720988959312224, -0.9611469483783784, -0.38013284559547794, 0.00720988959312224, -0.18646147800117796, 0.00720988959312224, 0.0, 0.00720988959312224, 0.00720988959312224, 0.20088125718742236, -0.23487931989975294, 0.2008812571874224, 0.9755667275646228, 0.00720988959312224, 0.00720988959312224, 0.00720988959312224, 0.0, 0.9755667275646228, 0.00720988959312224, 0.2008812571874224, 0.9755667275646228, 0.20088125718742236, -0.23487931989975294, 0.007209889593122244, 0.007209889593122244, 0.9755667275646228, 0.00720988959312224, 0.0, 0.2492990990859974, 0.39455262478172254, -0.5738042131897781, -0.5738042131897781, 0.20088125718742236, 0.007209889593122209, -0.1864614780011779, 0.7818953599703227, 0.39455262478172254, -0.3801328455954781, 0.007209889593122244, -0.1864614780011779, -0.1864614780011779, 0.2492990990859974, 0.00720988959312222, 0.007209889593122209, 0.2008812571874224, -0.2348793198997529, 0.3299955022502891, 0.3945526247817225, 0.7818953599703228, 0.4913883085788726, 0.00720988959312224, 0.5882239923760226, 0.3945526247817225, 0.0, 0.0, 0.0, -0.3801328455954781, 0.00720988959312224, 0.3945526247817225, 0.4913883085788726, -0.3801328455954781, -0.2348793198997529, 0.7818953599703228, 0.00720988959312224, 0.00720988959312224, 0.4913883085788726, 0.007209889593122244, -0.4769685293926281, -0.5738042131897781, 0.20088125718742236, -0.0, -0.3155757230640447, -0.1864614780011779, 0.5882239923760226, 0.00720988959312222, -0.3801328455954781, -0.7674755807840783, 0.5882239923760226, 0.9755667275646228, 0.2008812571874224, -1.1548183159726786, -1.5421610511612789, 0.39455262478172254, 0.652781114907456, 0.7818953599703228, 0.007209889593122244, -0.5738042131897781, -0.3801328455954781, 0.007209889593122209, 0.7818953599703228, -0.1864614780011779, 0.4913883085788726, -0.7674755807840783, -0.5738042131897781, -0.18646147800117788, 0.3945526247817225, -0.1864614780011779, 0.0, 0.00720988959312224, -0.6383613357212116, 0.3299955022502891, 0.7818953599703228, 0.7818953599703228, 0.3945526247817225, 0.007209889593122232, 0.00720988959312222, 0.5882239923760226, 1.1692380951589227, 0.5882239923760226, 0.4913883085788726, 0.7818953599703228, 0.7818953599703228, 0.9755667275646228, 0.9755667275646228, 0.7818953599703228, 1.1692380951589227, 0.9755667275646228, 0.7818953599703228, 0.7818953599703228, 0.00720988959312224, 0.00720988959312224, 0.3945526247817225, 0.00720988959312224, 0.00720988959312224, 0.00720988959312224, 0.00720988959312224, 0.0, 0.0, 0.0, 0.00720988959312223, -0.9611469483783784, -0.9611469483783786, 0.7334775180717478, 0.2492990990859974, 0.20088125718742236, 0.0, 0.0, -0.7674755807840783, -1.5421610511612789, -0.5738042131897781, -0.7190577388855033, -1.542161051161279, -0.7674755807840783, 1.1692380951589227, -0.2348793198997529, 0.007209889593122244]
baseline_norm = [0.6888888888888889, 0.7333333333333333, 0.7222222222222222, 0.7333333333333333, 0.6666666666666666, 0.7555555555555555, 0.7777777777777778, 0.7333333333333333, 0.7777777777777778, 0.0, 0.6111111111111109, 0.6111111111111109, 0.5185185185185185, 0.4444444444444445, 0.5, 0.5185185185185185, 0.5, 0.6666666666666666, 0.6666666666666666, 0.6888888888888889, 0.6666666666666666, 0.6888888888888889, 0.7333333333333333, 0.75, 0.7111111111111109, 0.0, 0.6944444444444444, 0.0, 0.6888888888888889, 0.7555555555555555, 0.7111111111111109, 0.6666666666666666, 0.6444444444444445, 0.6666666666666666, 0.6444444444444445, 0.6666666666666666, 0.6388888888888888, 0.6666666666666667, 0.6944444444444444, 0.6444444444444445, 0.7777777777777777, 0.6888888888888889, 0.5833333333333333, 0.7333333333333333, 0.0, 0.6666666666666666, 0.6388888888888888, 0.4888888888888889, 0.5555555555555556, 0.6388888888888888, 0.4444444444444444, 0.4074074074074074, 0.4444444444444444, 0.6388888888888888, 0.0, 0.5833333333333334, 0.5555555555555556, 0.5555555555555556, 0.5555555555555556, 0.5333333333333333, 0.5277777777777778, 0.6296296296296297, 0.6666666666666666, 0.6888888888888889, 0.7111111111111109, 0.6444444444444445, 0.7777777777777777, 0.5833333333333334, 0.6222222222222221, 0.6388888888888891, 0.6666666666666666, 0.7222222222222222, 0.7333333333333333, 0.75, 0.6222222222222221, 0.5555555555555556, 0.6222222222222221, 0.5555555555555556, 0.5833333333333334, 0.5777777777777777, 0.5, 0.5111111111111111, 0.42222222222222217, 0.7777777777777778, 0.75, 0.8611111111111109, 0.8, 0.7777777777777778, 0.7999999999999999, 0.7777777777777778, 0.8055555555555555, 0.7777777777777777, 0.7777777777777778, 0.0, 0.0, 0.7407407407407408, 0.6296296296296297, 0.5555555555555556, 0.6296296296296297, 0.6444444444444444, 0.6444444444444444, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.5555555555555556, 0.6222222222222221, 0.6666666666666666, 0.6444444444444444, 0.6666666666666666, 0.0, 0.6666666666666666, 0.6666666666666666, 0.6888888888888889, 0.6388888888888888, 0.6888888888888889, 0.7777777777777778, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.0, 0.7777777777777778, 0.6666666666666666, 0.6888888888888889, 0.7777777777777777, 0.6888888888888889, 0.6388888888888888, 0.6666666666666666, 0.6666666666666667, 0.7777777777777778, 0.6666666666666666, 0.0, 0.6944444444444444, 0.7111111111111109, 0.5999999999999999, 0.5999999999999999, 0.6888888888888889, 0.6666666666666667, 0.6444444444444445, 0.7555555555555555, 0.7111111111111109, 0.6222222222222222, 0.6666666666666666, 0.6444444444444444, 0.6444444444444444, 0.6944444444444444, 0.6666666666666667, 0.6666666666666666, 0.6888888888888889, 0.6388888888888888, 0.7037037037037037, 0.7111111111111109, 0.7555555555555555, 0.7222222222222222, 0.6666666666666666, 0.7333333333333333, 0.7111111111111109, 0.0, 0.0, 0.0, 0.6222222222222222, 0.6666666666666666, 0.7111111111111109, 0.7222222222222222, 0.6222222222222221, 0.6388888888888888, 0.7555555555555555, 0.6666666666666666, 0.6666666666666666, 0.7222222222222222, 0.6666666666666667, 0.6111111111111109, 0.5999999999999999, 0.6888888888888889, 0.0, 0.6296296296296297, 0.6444444444444445, 0.7333333333333333, 0.6666666666666667, 0.6222222222222222, 0.5777777777777777, 0.7333333333333333, 0.7777777777777778, 0.6888888888888889, 0.5333333333333334, 0.4888888888888889, 0.7111111111111109, 0.7407407407407408, 0.7555555555555555, 0.6666666666666667, 0.5999999999999999, 0.6222222222222222, 0.6666666666666666, 0.7555555555555555, 0.6444444444444445, 0.7222222222222222, 0.5777777777777778, 0.6, 0.6444444444444444, 0.7111111111111109, 0.6444444444444445, 0.0, 0.6666666666666666, 0.5925925925925926, 0.7037037037037037, 0.7555555555555555, 0.7555555555555555, 0.7111111111111109, 0.6666666666666666, 0.6666666666666666, 0.7333333333333333, 0.8, 0.7333333333333333, 0.7222222222222223, 0.7555555555555555, 0.7555555555555555, 0.7777777777777778, 0.7777777777777778, 0.7555555555555555, 0.8, 0.7777777777777778, 0.7555555555555555, 0.7555555555555555, 0.6666666666666666, 0.6666666666666666, 0.7111111111111109, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.0, 0.0, 0.0, 0.6666666666666666, 0.5555555555555556, 0.5555555555555556, 0.75, 0.6944444444444444, 0.6888888888888889, 0.0, 0.0, 0.5777777777777777, 0.4888888888888888, 0.6, 0.5833333333333334, 0.4888888888888889, 0.5777777777777777, 0.8, 0.6388888888888888, 0.6666666666666667]


#%%




_, p1 = stats.wilcoxon(svm_std, lstm_std)
_, p2 = stats.wilcoxon(linr_std, lstm_std)
_, p3 = stats.wilcoxon(linr_std, svm_std)
_, p4 = stats.wilcoxon(svm_std, baseline_std)
_, p5 = stats.wilcoxon(linr_std, baseline_std)
_, p6 = stats.wilcoxon(lstm_std, baseline_std)

_, pe1 = stats.wilcoxon(svm_norm, lstm_norm)
_, pe2 = stats.wilcoxon(linr_norm, lstm_norm)
_, pe3 = stats.wilcoxon(linr_norm, svm_norm)
_, pe4 = stats.wilcoxon(svm_norm, baseline_norm)
_, pe5 = stats.wilcoxon(linr_norm, baseline_norm)
_, pe6 = stats.wilcoxon(lstm_norm, baseline_norm)

alpha = 0.05

print('std comparison:', p1, p2, p3, p4, p5, p6)
print('norm comparison:', pe1, pe2, pe3, pe4, pe5, pe6)

# if p1 < alpha:  # null hypothesis: x comes from a normal distribution
#     print("The null hypothesis can be rejected")
# else:
#     print("The null hypothesis cannot be rejected")

#%%
# cols = [c for c in database_with_history.columns if ('bool' not in c) and ('target' not in c) and ('date' not in c) and ('id' not in c)]
# df_cor = database_with_history[cols].corr()
# # print(df_cor)
# # df_cor = df.corr()
# # pd.DataFrame(np.linalg.inv(df_cor.values), index = df_cor.index, columns=df_cor.columns)
# print(pd.Series(np.linalg.inv(df_cor.values).diagonal(), index=df_cor.index).round(2))

# database_with_history = history.reset_index()
# database_with_history.head()
# cols = [c for c in database_with_history.columns if (('history' in c) or ('id' in c) or ('date' in c) or ('target_mood' in c))]
# database_with_history = database_with_history[cols]
# database_with_history.head()

# database_with_history = database_with_history[cols]
# database_with_history = database_with_history.reset_index()
# database_with_history.head()
